---
# User-level programming languages installation and setup

# Go directories for user
- name: Create Go directories
  ansible.builtin.file:
    path: "{{ real_user_home }}/go/{{ item }}"
    state: directory
    owner: "{{ real_user }}"
    group: "{{ real_user }}"
    mode: '0755'
  loop:
    - src
    - pkg
    - bin
  become: false
  tags: [go, languages, user]

- name: Install Go packages
  environment:
    PATH: /usr/local/go/bin:{{ ansible_env.PATH }}
    GOPATH: "{{ real_user_home }}/go"
  ansible.builtin.command:
    cmd: go install {{ item }}
    creates: "{{ real_user_home }}/go/bin/{{ item.split('/')[-1].split('@')[0] }}"
  loop:
    - github.com/air-verse/air@latest
    - github.com/jesseduffield/lazygit@latest
    - github.com/go-delve/delve/cmd/dlv@latest
  become: false
  tags: [go, languages, user]

# Rust
- name: Download Rust installer
  ansible.builtin.get_url:
    url: "https://sh.rustup.rs"
    dest: "/tmp/rustup.sh"
    mode: '0755'
  become: false
  tags: [rust, languages, user]

- name: Install Rust
  ansible.builtin.shell: sh /tmp/rustup.sh -y
  args:
    creates: "{{ real_user_home }}/.cargo/bin/rustc"
  become: false
  tags: [rust, languages, user]

- name: Source cargo env to activate it
  ansible.builtin.shell:
    cmd: ". {{ real_user_home }}/.cargo/env"
  args:
    executable: "/bin/bash"
  become: false
  tags: [rust, languages, user]
  changed_when: false

- name: Install Cargo packages
  community.general.cargo:
    name: "{{ item }}"
    state: present
  environment:
    PATH: "{{ real_user_home }}/.cargo/bin:{{ ansible_env.PATH }}"
  become: false
  loop: "{{ cargo_packages }}"
  tags: [rust, cargo, languages, user]

# NVM & Node
- name: Check if NVM is installed
  ansible.builtin.stat:
    path: "{{ real_user_home }}/.nvm/nvm.sh"
  register: nvm_script
  tags: [nvm, node, languages, user]

- name: Install Node Version Manager (NVM)
  ansible.builtin.shell:
    cmd: bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
  environment:
    PROFILE: "/dev/null"
    HOME: "{{ real_user_home }}"
  become: false
  when: not nvm_script.stat.exists
  register: nvm_install
  changed_when: nvm_install.rc == 0 and not nvm_script.stat.exists
  tags: [nvm, node, languages, user]

- name: Source NVM and Install Node
  ansible.builtin.shell:
    cmd: |
      source {{ real_user_home }}/.nvm/nvm.sh
      nvm install node
  environment:
    PROFILE: "/dev/null"
    HOME: "{{ real_user_home }}"
  args:
    executable: /bin/bash
  become: false
  tags: [nvm, node, languages, user]
  register: node_install
  changed_when: "'is now installed' in node_install.stdout"

# Python
- name: Check if pyenv is installed
  ansible.builtin.stat:
    path: "{{ real_user_home }}/.pyenv/bin/pyenv"
  register: pyenv_binary
  tags: [pyenv, languages, user]

- name: Install pyenv
  ansible.builtin.shell:
    cmd: curl https://pyenv.run | bash
  environment:
    PROFILE: /dev/null
    HOME: "{{ real_user_home }}"
  become: false
  when: not pyenv_binary.stat.exists
  register: pyenv_install
  changed_when: pyenv_install.rc == 0 and not pyenv_binary.stat.exists
  tags: [pyenv, languages, user]

- name: Check if uv Python Manager is installed
  ansible.builtin.stat:
    path: "{{ real_user_home }}/.local/bin/uv"
  register: uv_binary
  tags: [languages, python, user]

- name: Install uv Python Manager
  ansible.builtin.shell: 
    cmd: curl -LsSf https://astral.sh/uv/install.sh | sh
  environment:
    HOME: "{{ real_user_home }}"
  become: false
  when: not uv_binary.stat.exists
  register: uv_install
  changed_when: uv_install.rc == 0 and not uv_binary.stat.exists
  tags: [languages, python, user]

- name: Check if Node.js is installed
  ansible.builtin.shell: |
    source {{ real_user_home }}/.nvm/nvm.sh
    node --version
  args:
    executable: /bin/bash
  register: node_version
  ignore_errors: true
  changed_when: false
  become: false
  tags: [languages, node, user]

- name: Install Claude-Code
  ansible.builtin.shell: |
    source {{ real_user_home }}/.nvm/nvm.sh
    npm install -g @anthropic-ai/claude-code
  args:
    executable: /bin/bash
  register: claude_install
  when: node_version is defined and node_version.rc == 0
  become: false
  environment:
    HOME: "{{ real_user_home }}"
  tags: [languages, node, user]