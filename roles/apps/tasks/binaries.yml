---
# Binary application installations

- name: Ensure binary directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_home }}/.local/bin"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  tags: [apps, binaries]

- name: Ensure man directory exists
  ansible.builtin.file:
    path: "{{ ansible_user_home }}/.local/share/man/man1"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  tags: [apps, binaries]

# This file is for non-AppImage binaries that should be downloaded
# AppImages should be placed in the apps_dir and handled in main.yml

# FFmpeg - Media processing tool
- name: Check if FFmpeg is installed
  ansible.builtin.stat:
    path: "{{ ansible_user_home }}/.local/bin/ffmpeg"
  register: ffmpeg_binary
  tags: [apps, binaries, media]

- name: Create temporary directory for FFmpeg
  ansible.builtin.file:
    path: "/tmp/ffmpeg_install"
    state: directory
    mode: '0755'
  when: not ffmpeg_binary.stat.exists
  tags: [apps, binaries, media]

- name: Download FFmpeg
  ansible.builtin.get_url:
    url: https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz
    dest: "/tmp/ffmpeg_install/ffmpeg.tar.xz"
  when: not ffmpeg_binary.stat.exists
  tags: [apps, binaries, media]

- name: Extract FFmpeg
  ansible.builtin.unarchive:
    src: "/tmp/ffmpeg_install/ffmpeg.tar.xz"
    dest: "/tmp/ffmpeg_install"
    remote_src: yes
  when: not ffmpeg_binary.stat.exists
  tags: [apps, binaries, media]

- name: Copy FFmpeg binaries to ~/.local/bin
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0755'
    remote_src: yes
  loop:
    - { src: "/tmp/ffmpeg_install/ffmpeg-master-latest-linux64-gpl/bin/ffmpeg", dest: "{{ ansible_user_home }}/.local/bin/ffmpeg" }
    - { src: "/tmp/ffmpeg_install/ffmpeg-master-latest-linux64-gpl/bin/ffplay", dest: "{{ ansible_user_home }}/.local/bin/ffplay" }
    - { src: "/tmp/ffmpeg_install/ffmpeg-master-latest-linux64-gpl/bin/ffprobe", dest: "{{ ansible_user_home }}/.local/bin/ffprobe" }
  when: not ffmpeg_binary.stat.exists
  tags: [apps, binaries, media]

- name: Copy FFmpeg man pages to ~/.local/share/man/man1
  ansible.builtin.copy:
    src: "/tmp/ffmpeg_install/ffmpeg-master-latest-linux64-gpl/man/man1/"
    dest: "{{ ansible_user_home }}/.local/share/man/man1/"
    mode: '0644'
    remote_src: yes
  when: not ffmpeg_binary.stat.exists
  tags: [apps, binaries, media]

- name: Clean up FFmpeg temporary directory
  ansible.builtin.file:
    path: "/tmp/ffmpeg_install"
    state: absent
  when: not ffmpeg_binary.stat.exists
  tags: [apps, binaries, media]

# yt-dlp - YouTube downloader
- name: Install yt-dlp with pip
  ansible.builtin.pip:
    name: "yt-dlp[default]"
    state: latest
    extra_args: --user
  tags: [apps, binaries, media]

# Ollama - Local AI model runner
- name: Check if Ollama is installed
  ansible.builtin.stat:
    path: "/usr/local/bin/ollama"
  register: ollama_binary
  tags: [apps, binaries, ai]

- name: Install Ollama
  ansible.builtin.shell:
    cmd: curl -fsSL https://ollama.com/install.sh | sh
  become: true
  when: not ollama_binary.stat.exists
  register: ollama_install
  changed_when: ollama_install.rc == 0 and not ollama_binary.stat.exists
  tags: [apps, binaries, ai]

- name: Ensure correct ownership for Ollama data directory
  ansible.builtin.file:
    path: "{{ ansible_user_home }}/.ollama"
    state: directory
    mode: '0755'
    recurse: true
    owner: "{{ ansible_user_real }}"
    group: "{{ ansible_user_real }}"
  when: ollama_install.changed | default(false)
  tags: [apps, binaries, ai]